{-
   The Plaid API

   The Plaid REST API. Please see https://plaid.com/docs/api for more details.

   OpenAPI Version: 3.0.0
   The Plaid API API version: 2020-09-14_1.8.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ThePlaid.API.Plaid
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ThePlaid.API.Plaid where

import ThePlaid.Core
import ThePlaid.MimeTypes
import ThePlaid.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Plaid

-- *** accountsBalanceGet

-- | @POST \/accounts\/balance\/get@
-- 
-- Retrieve real-time balance data
-- 
-- The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
accountsBalanceGet 
  :: (Consumes AccountsBalanceGet MimeJSON, MimeRender MimeJSON AccountsBalanceGetRequest)
  => AccountsBalanceGetRequest -- ^ "accountsBalanceGetRequest"
  -> ThePlaidRequest AccountsBalanceGet MimeJSON AccountsGetResponse MimeJSON
accountsBalanceGet accountsBalanceGetRequest =
  _mkRequest "POST" ["/accounts/balance/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` accountsBalanceGetRequest

data AccountsBalanceGet 
instance HasBodyParam AccountsBalanceGet AccountsBalanceGetRequest 

-- | @application/json@
instance Consumes AccountsBalanceGet MimeJSON

-- | @application/json@
instance Produces AccountsBalanceGet MimeJSON


-- *** accountsGet

-- | @POST \/accounts\/get@
-- 
-- Retrieve accounts
-- 
-- The `/accounts/get`  endpoint can be used to retrieve information for any linked Item. Note that some information is nullable. Plaid will only return active bank accounts, i.e. accounts that are not closed and are capable of carrying a balance.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
accountsGet 
  :: (Consumes AccountsGet MimeJSON, MimeRender MimeJSON AccountsGetRequest)
  => AccountsGetRequest -- ^ "accountsGetRequest"
  -> ThePlaidRequest AccountsGet MimeJSON AccountsGetResponse MimeJSON
accountsGet accountsGetRequest =
  _mkRequest "POST" ["/accounts/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` accountsGetRequest

data AccountsGet 
instance HasBodyParam AccountsGet AccountsGetRequest 

-- | @application/json@
instance Consumes AccountsGet MimeJSON

-- | @application/json@
instance Produces AccountsGet MimeJSON


-- *** assetReportAuditCopyCreate

-- | @POST \/asset_report\/audit_copy\/create@
-- 
-- Create Asset Report Audit Copy
-- 
-- Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportAuditCopyCreate 
  :: (Consumes AssetReportAuditCopyCreate MimeJSON, MimeRender MimeJSON AssetReportAuditCopyCreateRequest)
  => AssetReportAuditCopyCreateRequest -- ^ "assetReportAuditCopyCreateRequest"
  -> ThePlaidRequest AssetReportAuditCopyCreate MimeJSON AssetReportAuditCopyCreateResponse MimeJSON
assetReportAuditCopyCreate assetReportAuditCopyCreateRequest =
  _mkRequest "POST" ["/asset_report/audit_copy/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportAuditCopyCreateRequest

data AssetReportAuditCopyCreate 
instance HasBodyParam AssetReportAuditCopyCreate AssetReportAuditCopyCreateRequest 

-- | @application/json@
instance Consumes AssetReportAuditCopyCreate MimeJSON

-- | @application/json@
instance Produces AssetReportAuditCopyCreate MimeJSON


-- *** assetReportAuditCopyGet

-- | @POST \/asset_report\/audit_copy\/get@
-- 
-- Retrieve an Asset Report Audit Copy
-- 
-- `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportAuditCopyGet 
  :: (Consumes AssetReportAuditCopyGet MimeJSON, MimeRender MimeJSON AssetReportAuditCopyGetRequest)
  => AssetReportAuditCopyGetRequest -- ^ "assetReportAuditCopyGetRequest"
  -> ThePlaidRequest AssetReportAuditCopyGet MimeJSON AssetReportGetResponse MimeJSON
assetReportAuditCopyGet assetReportAuditCopyGetRequest =
  _mkRequest "POST" ["/asset_report/audit_copy/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportAuditCopyGetRequest

data AssetReportAuditCopyGet 
instance HasBodyParam AssetReportAuditCopyGet AssetReportAuditCopyGetRequest 

-- | @application/json@
instance Consumes AssetReportAuditCopyGet MimeJSON

-- | @application/json@
instance Produces AssetReportAuditCopyGet MimeJSON


-- *** assetReportAuditCopyRemove

-- | @POST \/asset_report\/audit_copy\/remove@
-- 
-- Remove Asset Report Audit Copy
-- 
-- The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportAuditCopyRemove 
  :: (Consumes AssetReportAuditCopyRemove MimeJSON, MimeRender MimeJSON AssetReportAuditCopyRemoveRequest)
  => AssetReportAuditCopyRemoveRequest -- ^ "assetReportAuditCopyRemoveRequest"
  -> ThePlaidRequest AssetReportAuditCopyRemove MimeJSON AssetReportAuditCopyRemoveResponse MimeJSON
assetReportAuditCopyRemove assetReportAuditCopyRemoveRequest =
  _mkRequest "POST" ["/asset_report/audit_copy/remove"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportAuditCopyRemoveRequest

data AssetReportAuditCopyRemove 
instance HasBodyParam AssetReportAuditCopyRemove AssetReportAuditCopyRemoveRequest 

-- | @application/json@
instance Consumes AssetReportAuditCopyRemove MimeJSON

-- | @application/json@
instance Produces AssetReportAuditCopyRemove MimeJSON


-- *** assetReportCreate

-- | @POST \/asset_report\/create@
-- 
-- Create an Asset Report
-- 
-- The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](/docs/api/webhooks/#Assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportCreate 
  :: (Consumes AssetReportCreate MimeJSON, MimeRender MimeJSON AssetReportCreateRequest)
  => AssetReportCreateRequest -- ^ "assetReportCreateRequest"
  -> ThePlaidRequest AssetReportCreate MimeJSON AssetReportCreateResponse MimeJSON
assetReportCreate assetReportCreateRequest =
  _mkRequest "POST" ["/asset_report/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportCreateRequest

data AssetReportCreate 
instance HasBodyParam AssetReportCreate AssetReportCreateRequest 

-- | @application/json@
instance Consumes AssetReportCreate MimeJSON

-- | @application/json@
instance Produces AssetReportCreate MimeJSON


-- *** assetReportFilter

-- | @POST \/asset_report\/filter@
-- 
-- Filter Asset Report
-- 
-- By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Select Account view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportFilter 
  :: (Consumes AssetReportFilter MimeJSON, MimeRender MimeJSON AssetReportFilterRequest)
  => AssetReportFilterRequest -- ^ "assetReportFilterRequest"
  -> ThePlaidRequest AssetReportFilter MimeJSON AssetReportFilterResponse MimeJSON
assetReportFilter assetReportFilterRequest =
  _mkRequest "POST" ["/asset_report/filter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportFilterRequest

data AssetReportFilter 
instance HasBodyParam AssetReportFilter AssetReportFilterRequest 

-- | @application/json@
instance Consumes AssetReportFilter MimeJSON

-- | @application/json@
instance Produces AssetReportFilter MimeJSON


-- *** assetReportGet

-- | @POST \/asset_report\/get@
-- 
-- Retrieve an Asset Report
-- 
-- The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`. Note that you will need to [contact us](https://dashboard.plaid.com/support) to get access to this feature.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportGet 
  :: (Consumes AssetReportGet MimeJSON, MimeRender MimeJSON AssetReportGetRequest)
  => AssetReportGetRequest -- ^ "assetReportGetRequest"
  -> ThePlaidRequest AssetReportGet MimeJSON AssetReportGetResponse MimeJSON
assetReportGet assetReportGetRequest =
  _mkRequest "POST" ["/asset_report/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportGetRequest

data AssetReportGet 
instance HasBodyParam AssetReportGet AssetReportGetRequest 

-- | @application/json@
instance Consumes AssetReportGet MimeJSON

-- | @application/json@
instance Produces AssetReportGet MimeJSON


-- *** assetReportPdfGet

-- | @POST \/asset_report\/pdf\/get@
-- 
-- Retrieve a PDF Asset Report
-- 
-- The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report with Insights](https://plaid.com/documents/sample-asset-report.pdf).
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportPdfGet 
  :: (Consumes AssetReportPdfGet MimeJSON, MimeRender MimeJSON AssetReportPDFGetRequest)
  => AssetReportPDFGetRequest -- ^ "assetReportPdfGetRequest"
  -> ThePlaidRequest AssetReportPdfGet MimeJSON FilePath MimePdf
assetReportPdfGet assetReportPdfGetRequest =
  _mkRequest "POST" ["/asset_report/pdf/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportPdfGetRequest

data AssetReportPdfGet 
instance HasBodyParam AssetReportPdfGet AssetReportPDFGetRequest 

-- | @application/json@
instance Consumes AssetReportPdfGet MimeJSON

-- | @application/pdf@
instance Produces AssetReportPdfGet MimePdf


-- *** assetReportRefresh

-- | @POST \/asset_report\/refresh@
-- 
-- Refresh an Asset Report
-- 
-- An Asset Report is an immutable snapshot of a user's assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportRefresh 
  :: (Consumes AssetReportRefresh MimeJSON, MimeRender MimeJSON AssetReportRefreshRequest)
  => AssetReportRefreshRequest -- ^ "assetReportRefreshRequest"
  -> ThePlaidRequest AssetReportRefresh MimeJSON AssetReportRefreshResponse MimeJSON
assetReportRefresh assetReportRefreshRequest =
  _mkRequest "POST" ["/asset_report/refresh"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportRefreshRequest

data AssetReportRefresh 
instance HasBodyParam AssetReportRefresh AssetReportRefreshRequest 

-- | @application/json@
instance Consumes AssetReportRefresh MimeJSON

-- | @application/json@
instance Produces AssetReportRefresh MimeJSON


-- *** assetReportRemove

-- | @POST \/asset_report\/remove@
-- 
-- Delete an Asset Report
-- 
-- The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
assetReportRemove 
  :: (Consumes AssetReportRemove MimeJSON, MimeRender MimeJSON AssetReportRemoveRequest)
  => AssetReportRemoveRequest -- ^ "assetReportRemoveRequest"
  -> ThePlaidRequest AssetReportRemove MimeJSON AssetReportRemoveResponse MimeJSON
assetReportRemove assetReportRemoveRequest =
  _mkRequest "POST" ["/asset_report/remove"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` assetReportRemoveRequest

data AssetReportRemove 
instance HasBodyParam AssetReportRemove AssetReportRemoveRequest 

-- | @application/json@
instance Consumes AssetReportRemove MimeJSON

-- | @application/json@
instance Produces AssetReportRemove MimeJSON


-- *** authGet

-- | @POST \/auth\/get@
-- 
-- Retrieve auth data
-- 
-- The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
authGet 
  :: (Consumes AuthGet MimeJSON, MimeRender MimeJSON AuthGetRequest)
  => AuthGetRequest -- ^ "authGetRequest"
  -> ThePlaidRequest AuthGet MimeJSON AuthGetResponse MimeJSON
authGet authGetRequest =
  _mkRequest "POST" ["/auth/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` authGetRequest

data AuthGet 
instance HasBodyParam AuthGet AuthGetRequest 

-- | @application/json@
instance Consumes AuthGet MimeJSON

-- | @application/json@
instance Produces AuthGet MimeJSON


-- *** bankTransferBalanceGet

-- | @POST \/bank_transfer\/balance\/get@
-- 
-- Get balance of your Bank Transfer account
-- 
-- Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferBalanceGet 
  :: (Consumes BankTransferBalanceGet MimeJSON, MimeRender MimeJSON BankTransferBalanceGetRequest)
  => BankTransferBalanceGetRequest -- ^ "bankTransferBalanceGetRequest"
  -> ThePlaidRequest BankTransferBalanceGet MimeJSON BankTransferBalanceGetResponse MimeJSON
bankTransferBalanceGet bankTransferBalanceGetRequest =
  _mkRequest "POST" ["/bank_transfer/balance/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferBalanceGetRequest

data BankTransferBalanceGet 
instance HasBodyParam BankTransferBalanceGet BankTransferBalanceGetRequest 

-- | @application/json@
instance Consumes BankTransferBalanceGet MimeJSON

-- | @application/json@
instance Produces BankTransferBalanceGet MimeJSON


-- *** bankTransferCancel

-- | @POST \/bank_transfer\/cancel@
-- 
-- Cancel a bank transfer
-- 
-- Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferCancel 
  :: (Consumes BankTransferCancel MimeJSON, MimeRender MimeJSON BankTransferCancelRequest)
  => BankTransferCancelRequest -- ^ "bankTransferCancelRequest"
  -> ThePlaidRequest BankTransferCancel MimeJSON BankTransferCancelResponse MimeJSON
bankTransferCancel bankTransferCancelRequest =
  _mkRequest "POST" ["/bank_transfer/cancel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferCancelRequest

data BankTransferCancel 
instance HasBodyParam BankTransferCancel BankTransferCancelRequest 

-- | @application/json@
instance Consumes BankTransferCancel MimeJSON

-- | @application/json@
instance Produces BankTransferCancel MimeJSON


-- *** bankTransferCreate

-- | @POST \/bank_transfer\/create@
-- 
-- Create a bank transfer
-- 
-- Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferCreate 
  :: (Consumes BankTransferCreate MimeJSON, MimeRender MimeJSON BankTransferCreateRequest)
  => BankTransferCreateRequest -- ^ "bankTransferCreateRequest"
  -> ThePlaidRequest BankTransferCreate MimeJSON BankTransferCreateResponse MimeJSON
bankTransferCreate bankTransferCreateRequest =
  _mkRequest "POST" ["/bank_transfer/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferCreateRequest

data BankTransferCreate 
instance HasBodyParam BankTransferCreate BankTransferCreateRequest 

-- | @application/json@
instance Consumes BankTransferCreate MimeJSON

-- | @application/json@
instance Produces BankTransferCreate MimeJSON


-- *** bankTransferEventList

-- | @POST \/bank_transfer\/event\/list@
-- 
-- List bank transfer events
-- 
-- Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferEventList 
  :: (Consumes BankTransferEventList MimeJSON, MimeRender MimeJSON BankTransferEventListRequest)
  => BankTransferEventListRequest -- ^ "bankTransferEventListRequest"
  -> ThePlaidRequest BankTransferEventList MimeJSON BankTransferEventListResponse MimeJSON
bankTransferEventList bankTransferEventListRequest =
  _mkRequest "POST" ["/bank_transfer/event/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferEventListRequest

data BankTransferEventList 
instance HasBodyParam BankTransferEventList BankTransferEventListRequest 

-- | @application/json@
instance Consumes BankTransferEventList MimeJSON

-- | @application/json@
instance Produces BankTransferEventList MimeJSON


-- *** bankTransferEventSync

-- | @POST \/bank_transfer\/event\/sync@
-- 
-- Sync bank transfer events
-- 
-- `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events. 
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferEventSync 
  :: (Consumes BankTransferEventSync MimeJSON, MimeRender MimeJSON BankTransferEventSyncRequest)
  => BankTransferEventSyncRequest -- ^ "bankTransferEventSyncRequest"
  -> ThePlaidRequest BankTransferEventSync MimeJSON BankTransferEventSyncResponse MimeJSON
bankTransferEventSync bankTransferEventSyncRequest =
  _mkRequest "POST" ["/bank_transfer/event/sync"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferEventSyncRequest

data BankTransferEventSync 
instance HasBodyParam BankTransferEventSync BankTransferEventSyncRequest 

-- | @application/json@
instance Consumes BankTransferEventSync MimeJSON

-- | @application/json@
instance Produces BankTransferEventSync MimeJSON


-- *** bankTransferGet

-- | @POST \/bank_transfer\/get@
-- 
-- Retrieve a bank transfer
-- 
-- The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferGet 
  :: (Consumes BankTransferGet MimeJSON, MimeRender MimeJSON BankTransferGetRequest)
  => BankTransferGetRequest -- ^ "bankTransferGetRequest"
  -> ThePlaidRequest BankTransferGet MimeJSON BankTransferGetResponse MimeJSON
bankTransferGet bankTransferGetRequest =
  _mkRequest "POST" ["/bank_transfer/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferGetRequest

data BankTransferGet 
instance HasBodyParam BankTransferGet BankTransferGetRequest 

-- | @application/json@
instance Consumes BankTransferGet MimeJSON

-- | @application/json@
instance Produces BankTransferGet MimeJSON


-- *** bankTransferList

-- | @POST \/bank_transfer\/list@
-- 
-- List bank transfers
-- 
-- Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferList 
  :: (Consumes BankTransferList MimeJSON, MimeRender MimeJSON BankTransferListRequest)
  => BankTransferListRequest -- ^ "bankTransferListRequest"
  -> ThePlaidRequest BankTransferList MimeJSON BankTransferListResponse MimeJSON
bankTransferList bankTransferListRequest =
  _mkRequest "POST" ["/bank_transfer/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferListRequest

data BankTransferList 
instance HasBodyParam BankTransferList BankTransferListRequest 

-- | @application/json@
instance Consumes BankTransferList MimeJSON

-- | @application/json@
instance Produces BankTransferList MimeJSON


-- *** bankTransferMigrateAccount

-- | @POST \/bank_transfer\/migrate_account@
-- 
-- Migrate account into Bank Transfers
-- 
-- As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
bankTransferMigrateAccount 
  :: (Consumes BankTransferMigrateAccount MimeJSON, MimeRender MimeJSON BankTransferMigrateAccountRequest)
  => BankTransferMigrateAccountRequest -- ^ "bankTransferMigrateAccountRequest"
  -> ThePlaidRequest BankTransferMigrateAccount MimeJSON BankTransferMigrateAccountResponse MimeJSON
bankTransferMigrateAccount bankTransferMigrateAccountRequest =
  _mkRequest "POST" ["/bank_transfer/migrate_account"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` bankTransferMigrateAccountRequest

data BankTransferMigrateAccount 
instance HasBodyParam BankTransferMigrateAccount BankTransferMigrateAccountRequest 

-- | @application/json@
instance Consumes BankTransferMigrateAccount MimeJSON

-- | @application/json@
instance Produces BankTransferMigrateAccount MimeJSON


-- *** categoriesGet

-- | @POST \/categories\/get@
-- 
-- Get Categories
-- 
-- Send a request to the `/categories/get`  endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
-- 
categoriesGet 
  :: (Consumes CategoriesGet MimeJSON, MimeRender MimeJSON Body)
  => Body -- ^ "body"
  -> ThePlaidRequest CategoriesGet MimeJSON CategoriesGetResponse MimeJSON
categoriesGet body =
  _mkRequest "POST" ["/categories/get"]
    `setBodyParam` body

data CategoriesGet 
instance HasBodyParam CategoriesGet Body 

-- | @application/json@
instance Consumes CategoriesGet MimeJSON

-- | @application/json@
instance Produces CategoriesGet MimeJSON


-- *** createPaymentToken

-- | @POST \/payment_initiation\/payment\/token\/create@
-- 
-- Create payment token
-- 
-- The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
createPaymentToken 
  :: (Consumes CreatePaymentToken MimeJSON, MimeRender MimeJSON PaymentInitiationPaymentTokenCreateRequest)
  => PaymentInitiationPaymentTokenCreateRequest -- ^ "paymentInitiationPaymentTokenCreateRequest"
  -> ThePlaidRequest CreatePaymentToken MimeJSON PaymentInitiationPaymentTokenCreateResponse MimeJSON
createPaymentToken paymentInitiationPaymentTokenCreateRequest =
  _mkRequest "POST" ["/payment_initiation/payment/token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationPaymentTokenCreateRequest

{-# DEPRECATED createPaymentToken "" #-}

data CreatePaymentToken 
instance HasBodyParam CreatePaymentToken PaymentInitiationPaymentTokenCreateRequest 

-- | @application/json@
instance Consumes CreatePaymentToken MimeJSON

-- | @application/json@
instance Produces CreatePaymentToken MimeJSON


-- *** depositSwitchAltCreate

-- | @POST \/deposit_switch\/alt\/create@
-- 
-- Create a deposit switch when not using Plaid Exchange.'
-- 
-- This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it created a deposit switch entity that will be persisted throughout the lifecycle of the switch.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
depositSwitchAltCreate 
  :: (Consumes DepositSwitchAltCreate MimeJSON)
  => ThePlaidRequest DepositSwitchAltCreate MimeJSON DepositSwitchAltCreateResponse MimeJSON
depositSwitchAltCreate =
  _mkRequest "POST" ["/deposit_switch/alt/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data DepositSwitchAltCreate 
instance HasBodyParam DepositSwitchAltCreate DepositSwitchAltCreateRequest 

-- | @application/json@
instance Consumes DepositSwitchAltCreate MimeJSON

-- | @application/json@
instance Produces DepositSwitchAltCreate MimeJSON


-- *** depositSwitchCreate

-- | @POST \/deposit_switch\/create@
-- 
-- Create a deposit switch
-- 
-- This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
depositSwitchCreate 
  :: (Consumes DepositSwitchCreate MimeJSON, MimeRender MimeJSON DepositSwitchCreateRequest)
  => DepositSwitchCreateRequest -- ^ "depositSwitchCreateRequest"
  -> ThePlaidRequest DepositSwitchCreate MimeJSON DepositSwitchCreateResponse MimeJSON
depositSwitchCreate depositSwitchCreateRequest =
  _mkRequest "POST" ["/deposit_switch/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` depositSwitchCreateRequest

data DepositSwitchCreate 
instance HasBodyParam DepositSwitchCreate DepositSwitchCreateRequest 

-- | @application/json@
instance Consumes DepositSwitchCreate MimeJSON

-- | @application/json@
instance Produces DepositSwitchCreate MimeJSON


-- *** depositSwitchGet

-- | @POST \/deposit_switch\/get@
-- 
-- Retrieve a deposit switch
-- 
-- This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
depositSwitchGet 
  :: (Consumes DepositSwitchGet MimeJSON, MimeRender MimeJSON DepositSwitchGetRequest)
  => DepositSwitchGetRequest -- ^ "depositSwitchGetRequest"
  -> ThePlaidRequest DepositSwitchGet MimeJSON DepositSwitchGetResponse MimeJSON
depositSwitchGet depositSwitchGetRequest =
  _mkRequest "POST" ["/deposit_switch/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` depositSwitchGetRequest

data DepositSwitchGet 
instance HasBodyParam DepositSwitchGet DepositSwitchGetRequest 

-- | @application/json@
instance Consumes DepositSwitchGet MimeJSON

-- | @application/json@
instance Produces DepositSwitchGet MimeJSON


-- *** depositSwitchTokenCreate

-- | @POST \/deposit_switch\/token\/create@
-- 
-- Create a deposit switch token
-- 
-- In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
depositSwitchTokenCreate 
  :: (Consumes DepositSwitchTokenCreate MimeJSON, MimeRender MimeJSON DepositSwitchTokenCreateRequest)
  => DepositSwitchTokenCreateRequest -- ^ "depositSwitchTokenCreateRequest"
  -> ThePlaidRequest DepositSwitchTokenCreate MimeJSON DepositSwitchTokenCreateResponse MimeJSON
depositSwitchTokenCreate depositSwitchTokenCreateRequest =
  _mkRequest "POST" ["/deposit_switch/token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` depositSwitchTokenCreateRequest

data DepositSwitchTokenCreate 
instance HasBodyParam DepositSwitchTokenCreate DepositSwitchTokenCreateRequest 

-- | @application/json@
instance Consumes DepositSwitchTokenCreate MimeJSON

-- | @application/json@
instance Produces DepositSwitchTokenCreate MimeJSON


-- *** employersSearch

-- | @POST \/employers\/search@
-- 
-- Search employer database
-- 
-- `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Verification of Income product progresses through the beta period, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
employersSearch 
  :: (Consumes EmployersSearch MimeJSON)
  => ThePlaidRequest EmployersSearch MimeJSON EmployersSearchResponse MimeJSON
employersSearch =
  _mkRequest "POST" ["/employers/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data EmployersSearch 
instance HasBodyParam EmployersSearch EmployersSearchRequest 

-- | @application/json@
instance Consumes EmployersSearch MimeJSON

-- | @application/json@
instance Produces EmployersSearch MimeJSON


-- *** identityGet

-- | @POST \/identity\/get@
-- 
-- Retrieve identity data
-- 
-- The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
identityGet 
  :: (Consumes IdentityGet MimeJSON, MimeRender MimeJSON IdentityGetRequest)
  => IdentityGetRequest -- ^ "identityGetRequest"
  -> ThePlaidRequest IdentityGet MimeJSON IdentityGetResponse MimeJSON
identityGet identityGetRequest =
  _mkRequest "POST" ["/identity/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` identityGetRequest

data IdentityGet 
instance HasBodyParam IdentityGet IdentityGetRequest 

-- | @application/json@
instance Consumes IdentityGet MimeJSON

-- | @application/json@
instance Produces IdentityGet MimeJSON


-- *** incomeVerificationDocumentsDownload

-- | @POST \/income\/verification\/documents\/download@
-- 
-- Download the original documents used for income verification
-- 
-- `/income/verification/documents/download` provides the ability to download the source paystub PDF that the end user uploaded via Paystub Import.  The response to `/income/verification/documents/download` is a ZIP file in binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  In the future, when Digital Verification is available, the most recent file available for download with the payroll provider will also be available from this endpoint.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
incomeVerificationDocumentsDownload 
  :: (Consumes IncomeVerificationDocumentsDownload MimeJSON)
  => ThePlaidRequest IncomeVerificationDocumentsDownload MimeJSON FilePath MimeZip
incomeVerificationDocumentsDownload =
  _mkRequest "POST" ["/income/verification/documents/download"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data IncomeVerificationDocumentsDownload 
instance HasBodyParam IncomeVerificationDocumentsDownload IncomeVerificationDocumentsDownloadRequest 

-- | @application/json@
instance Consumes IncomeVerificationDocumentsDownload MimeJSON

-- | @application/zip@
instance Produces IncomeVerificationDocumentsDownload MimeZip


-- *** incomeVerificationPaystubGet

-- | @POST \/income\/verification\/paystub\/get@
-- 
-- Retrieve information from the paystub used for income verification
-- 
-- `/income/verification/paystub/get` returns the information collected from the paystub that was used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
incomeVerificationPaystubGet 
  :: (Consumes IncomeVerificationPaystubGet MimeJSON)
  => ThePlaidRequest IncomeVerificationPaystubGet MimeJSON IncomeVerificationPaystubGetResponse MimeJSON
incomeVerificationPaystubGet =
  _mkRequest "POST" ["/income/verification/paystub/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data IncomeVerificationPaystubGet 
instance HasBodyParam IncomeVerificationPaystubGet IncomeVerificationPaystubGetRequest 

-- | @application/json@
instance Consumes IncomeVerificationPaystubGet MimeJSON

-- | @application/json@
instance Produces IncomeVerificationPaystubGet MimeJSON


-- *** incomeVerificationSummaryGet

-- | @POST \/income\/verification\/summary\/get@
-- 
-- Retrieve a summary of information derived from income verification
-- 
-- `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
incomeVerificationSummaryGet 
  :: (Consumes IncomeVerificationSummaryGet MimeJSON)
  => ThePlaidRequest IncomeVerificationSummaryGet MimeJSON IncomeVerificationSummaryGetResponse MimeJSON
incomeVerificationSummaryGet =
  _mkRequest "POST" ["/income/verification/summary/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data IncomeVerificationSummaryGet 
instance HasBodyParam IncomeVerificationSummaryGet IncomeVerificationSummaryGetRequest 

-- | @application/json@
instance Consumes IncomeVerificationSummaryGet MimeJSON

-- | @application/json@
instance Produces IncomeVerificationSummaryGet MimeJSON


-- *** institutionsGet

-- | @POST \/institutions\/get@
-- 
-- Get details of all supported institutions
-- 
-- Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  This data changes frequently. If you store it locally on your system, be sure to update it regularly.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
institutionsGet 
  :: (Consumes InstitutionsGet contentType, MimeRender contentType InstitutionsGetRequest)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> InstitutionsGetRequest -- ^ "institutionsGetRequest"
  -> ThePlaidRequest InstitutionsGet contentType InstitutionsGetResponse MimeJSON
institutionsGet _ institutionsGetRequest =
  _mkRequest "POST" ["/institutions/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` institutionsGetRequest

data InstitutionsGet 
instance HasBodyParam InstitutionsGet InstitutionsGetRequest 

-- | @application/xml@
instance Consumes InstitutionsGet MimeXML
-- | @application/json@
instance Consumes InstitutionsGet MimeJSON

-- | @application/json@
instance Produces InstitutionsGet MimeJSON


-- *** institutionsGetById

-- | @POST \/institutions\/get_by_id@
-- 
-- Get details of an institution
-- 
-- Returns a JSON response containing details on a specified financial institution currently supported by Plaid.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
institutionsGetById 
  :: (Consumes InstitutionsGetById MimeJSON, MimeRender MimeJSON InstitutionsGetByIdRequest)
  => InstitutionsGetByIdRequest -- ^ "institutionsGetByIdRequest"
  -> ThePlaidRequest InstitutionsGetById MimeJSON InstitutionsGetByIdResponse MimeJSON
institutionsGetById institutionsGetByIdRequest =
  _mkRequest "POST" ["/institutions/get_by_id"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` institutionsGetByIdRequest

data InstitutionsGetById 
instance HasBodyParam InstitutionsGetById InstitutionsGetByIdRequest 

-- | @application/json@
instance Consumes InstitutionsGetById MimeJSON

-- | @application/json@
instance Produces InstitutionsGetById MimeJSON


-- *** institutionsSearch

-- | @POST \/institutions\/search@
-- 
-- Search institutions
-- 
-- Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
institutionsSearch 
  :: (Consumes InstitutionsSearch MimeJSON, MimeRender MimeJSON InstitutionsSearchRequest)
  => InstitutionsSearchRequest -- ^ "institutionsSearchRequest"
  -> ThePlaidRequest InstitutionsSearch MimeJSON InstitutionsSearchResponse MimeJSON
institutionsSearch institutionsSearchRequest =
  _mkRequest "POST" ["/institutions/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` institutionsSearchRequest

data InstitutionsSearch 
instance HasBodyParam InstitutionsSearch InstitutionsSearchRequest 

-- | @application/json@
instance Consumes InstitutionsSearch MimeJSON

-- | @application/json@
instance Produces InstitutionsSearch MimeJSON


-- *** investmentsHoldingsGet

-- | @POST \/investments\/holdings\/get@
-- 
-- Get Investment holdings
-- 
-- The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
investmentsHoldingsGet 
  :: (Consumes InvestmentsHoldingsGet MimeJSON, MimeRender MimeJSON InvestmentsHoldingsGetRequest)
  => InvestmentsHoldingsGetRequest -- ^ "investmentsHoldingsGetRequest"
  -> ThePlaidRequest InvestmentsHoldingsGet MimeJSON InvestmentsHoldingsGetResponse MimeJSON
investmentsHoldingsGet investmentsHoldingsGetRequest =
  _mkRequest "POST" ["/investments/holdings/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` investmentsHoldingsGetRequest

data InvestmentsHoldingsGet 
instance HasBodyParam InvestmentsHoldingsGet InvestmentsHoldingsGetRequest 

-- | @application/json@
instance Consumes InvestmentsHoldingsGet MimeJSON

-- | @application/json@
instance Produces InvestmentsHoldingsGet MimeJSON


-- *** investmentsTransactionsGet

-- | @POST \/investments\/transactions\/get@
-- 
-- Get investment transactions
-- 
-- The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
investmentsTransactionsGet 
  :: (Consumes InvestmentsTransactionsGet MimeJSON, MimeRender MimeJSON InvestmentsTransactionsGetRequest)
  => InvestmentsTransactionsGetRequest -- ^ "investmentsTransactionsGetRequest"
  -> ThePlaidRequest InvestmentsTransactionsGet MimeJSON InvestmentsTransactionsGetResponse MimeJSON
investmentsTransactionsGet investmentsTransactionsGetRequest =
  _mkRequest "POST" ["/investments/transactions/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` investmentsTransactionsGetRequest

data InvestmentsTransactionsGet 
instance HasBodyParam InvestmentsTransactionsGet InvestmentsTransactionsGetRequest 

-- | @application/json@
instance Consumes InvestmentsTransactionsGet MimeJSON

-- | @application/json@
instance Produces InvestmentsTransactionsGet MimeJSON


-- *** itemAccessTokenInvalidate

-- | @POST \/item\/access_token\/invalidate@
-- 
-- Invalidate access_token
-- 
-- By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemAccessTokenInvalidate 
  :: (Consumes ItemAccessTokenInvalidate MimeJSON, MimeRender MimeJSON ItemAccessTokenInvalidateRequest)
  => ItemAccessTokenInvalidateRequest -- ^ "itemAccessTokenInvalidateRequest"
  -> ThePlaidRequest ItemAccessTokenInvalidate MimeJSON ItemAccessTokenInvalidateResponse MimeJSON
itemAccessTokenInvalidate itemAccessTokenInvalidateRequest =
  _mkRequest "POST" ["/item/access_token/invalidate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemAccessTokenInvalidateRequest

data ItemAccessTokenInvalidate 
instance HasBodyParam ItemAccessTokenInvalidate ItemAccessTokenInvalidateRequest 

-- | @application/json@
instance Consumes ItemAccessTokenInvalidate MimeJSON

-- | @application/json@
instance Produces ItemAccessTokenInvalidate MimeJSON


-- *** itemCreatePublicToken

-- | @POST \/item\/public_token\/create@
-- 
-- Create public token
-- 
-- Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](/docs/quickstart) for more information.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemCreatePublicToken 
  :: (Consumes ItemCreatePublicToken MimeJSON, MimeRender MimeJSON ItemPublicTokenCreateRequest)
  => ItemPublicTokenCreateRequest -- ^ "itemPublicTokenCreateRequest"
  -> ThePlaidRequest ItemCreatePublicToken MimeJSON ItemPublicTokenCreateResponse MimeJSON
itemCreatePublicToken itemPublicTokenCreateRequest =
  _mkRequest "POST" ["/item/public_token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemPublicTokenCreateRequest

data ItemCreatePublicToken 
instance HasBodyParam ItemCreatePublicToken ItemPublicTokenCreateRequest 

-- | @application/json@
instance Consumes ItemCreatePublicToken MimeJSON

-- | @application/json@
instance Produces ItemCreatePublicToken MimeJSON


-- *** itemGet

-- | @POST \/item\/get@
-- 
-- Retrieve an Item
-- 
-- Returns information about the status of an Item.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemGet 
  :: (Consumes ItemGet MimeJSON, MimeRender MimeJSON ItemGetRequest)
  => ItemGetRequest -- ^ "itemGetRequest"
  -> ThePlaidRequest ItemGet MimeJSON ItemGetResponse MimeJSON
itemGet itemGetRequest =
  _mkRequest "POST" ["/item/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemGetRequest

data ItemGet 
instance HasBodyParam ItemGet ItemGetRequest 

-- | @application/json@
instance Consumes ItemGet MimeJSON

-- | @application/json@
instance Produces ItemGet MimeJSON


-- *** itemImport

-- | @POST \/item\/import@
-- 
-- Import Item
-- 
-- `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemImport 
  :: (Consumes ItemImport MimeJSON, MimeRender MimeJSON ItemImportRequest)
  => ItemImportRequest -- ^ "itemImportRequest"
  -> ThePlaidRequest ItemImport MimeJSON ItemImportResponse MimeJSON
itemImport itemImportRequest =
  _mkRequest "POST" ["/item/import"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemImportRequest

data ItemImport 
instance HasBodyParam ItemImport ItemImportRequest 

-- | @application/json@
instance Consumes ItemImport MimeJSON

-- | @application/json@
instance Produces ItemImport MimeJSON


-- *** itemPublicTokenExchange

-- | @POST \/item\/public_token\/exchange@
-- 
-- Exchange public token for an access token
-- 
-- Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemPublicTokenExchange 
  :: (Consumes ItemPublicTokenExchange MimeJSON, MimeRender MimeJSON ItemPublicTokenExchangeRequest)
  => ItemPublicTokenExchangeRequest -- ^ "itemPublicTokenExchangeRequest"
  -> ThePlaidRequest ItemPublicTokenExchange MimeJSON ItemPublicTokenExchangeResponse MimeJSON
itemPublicTokenExchange itemPublicTokenExchangeRequest =
  _mkRequest "POST" ["/item/public_token/exchange"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemPublicTokenExchangeRequest

data ItemPublicTokenExchange 
instance HasBodyParam ItemPublicTokenExchange ItemPublicTokenExchangeRequest 

-- | @application/json@
instance Consumes ItemPublicTokenExchange MimeJSON

-- | @application/json@
instance Produces ItemPublicTokenExchange MimeJSON


-- *** itemRemove

-- | @POST \/item\/remove@
-- 
-- Remove an Item
-- 
-- The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemRemove 
  :: (Consumes ItemRemove MimeJSON, MimeRender MimeJSON ItemRemoveRequest)
  => ItemRemoveRequest -- ^ "itemRemoveRequest"
  -> ThePlaidRequest ItemRemove MimeJSON ItemRemoveResponse MimeJSON
itemRemove itemRemoveRequest =
  _mkRequest "POST" ["/item/remove"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemRemoveRequest

data ItemRemove 
instance HasBodyParam ItemRemove ItemRemoveRequest 

-- | @application/json@
instance Consumes ItemRemove MimeJSON

-- | @application/json@
instance Produces ItemRemove MimeJSON


-- *** itemWebhookUpdate

-- | @POST \/item\/webhook\/update@
-- 
-- Update Webhook URL
-- 
-- The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](/docs/api/webhooks/#item-webhook-url-updated) webhook to the newly specified webhook URL.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
itemWebhookUpdate 
  :: (Consumes ItemWebhookUpdate MimeJSON, MimeRender MimeJSON ItemWebhookUpdateRequest)
  => ItemWebhookUpdateRequest -- ^ "itemWebhookUpdateRequest"
  -> ThePlaidRequest ItemWebhookUpdate MimeJSON ItemWebhookUpdateResponse MimeJSON
itemWebhookUpdate itemWebhookUpdateRequest =
  _mkRequest "POST" ["/item/webhook/update"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` itemWebhookUpdateRequest

data ItemWebhookUpdate 
instance HasBodyParam ItemWebhookUpdate ItemWebhookUpdateRequest 

-- | @application/json@
instance Consumes ItemWebhookUpdate MimeJSON

-- | @application/json@
instance Produces ItemWebhookUpdate MimeJSON


-- *** liabilitiesGet

-- | @POST \/liabilities\/get@
-- 
-- Retrieve Liabilities data
-- 
-- The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filter` parameter when [creating a Link token](/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
liabilitiesGet 
  :: (Consumes LiabilitiesGet MimeJSON, MimeRender MimeJSON LiabilitiesGetRequest)
  => LiabilitiesGetRequest -- ^ "liabilitiesGetRequest"
  -> ThePlaidRequest LiabilitiesGet MimeJSON LiabilitiesGetResponse MimeJSON
liabilitiesGet liabilitiesGetRequest =
  _mkRequest "POST" ["/liabilities/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` liabilitiesGetRequest

data LiabilitiesGet 
instance HasBodyParam LiabilitiesGet LiabilitiesGetRequest 

-- | @application/json@
instance Consumes LiabilitiesGet MimeJSON

-- | @application/json@
instance Produces LiabilitiesGet MimeJSON


-- *** linkTokenCreate

-- | @POST \/link\/token\/create@
-- 
-- Create Link Token
-- 
-- The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
linkTokenCreate 
  :: (Consumes LinkTokenCreate MimeJSON, MimeRender MimeJSON LinkTokenCreateRequest)
  => LinkTokenCreateRequest -- ^ "linkTokenCreateRequest"
  -> ThePlaidRequest LinkTokenCreate MimeJSON LinkTokenCreateResponse MimeJSON
linkTokenCreate linkTokenCreateRequest =
  _mkRequest "POST" ["/link/token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` linkTokenCreateRequest

data LinkTokenCreate 
instance HasBodyParam LinkTokenCreate LinkTokenCreateRequest 

-- | @application/json@
instance Consumes LinkTokenCreate MimeJSON

-- | @application/json@
instance Produces LinkTokenCreate MimeJSON


-- *** linkTokenGet

-- | @POST \/link\/token\/get@
-- 
-- Get Link Token
-- 
-- The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
linkTokenGet 
  :: (Consumes LinkTokenGet MimeJSON, MimeRender MimeJSON LinkTokenGetRequest)
  => LinkTokenGetRequest -- ^ "linkTokenGetRequest"
  -> ThePlaidRequest LinkTokenGet MimeJSON LinkTokenGetResponse MimeJSON
linkTokenGet linkTokenGetRequest =
  _mkRequest "POST" ["/link/token/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` linkTokenGetRequest

data LinkTokenGet 
instance HasBodyParam LinkTokenGet LinkTokenGetRequest 

-- | @application/json@
instance Consumes LinkTokenGet MimeJSON

-- | @application/json@
instance Produces LinkTokenGet MimeJSON


-- *** paymentInitiationPaymentCreate

-- | @POST \/payment_initiation\/payment\/create@
-- 
-- Create a payment
-- 
-- After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments will continue indefinitely and cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
paymentInitiationPaymentCreate 
  :: (Consumes PaymentInitiationPaymentCreate MimeJSON, MimeRender MimeJSON PaymentInitiationPaymentCreateRequest)
  => PaymentInitiationPaymentCreateRequest -- ^ "paymentInitiationPaymentCreateRequest"
  -> ThePlaidRequest PaymentInitiationPaymentCreate MimeJSON PaymentInitiationPaymentCreateResponse MimeJSON
paymentInitiationPaymentCreate paymentInitiationPaymentCreateRequest =
  _mkRequest "POST" ["/payment_initiation/payment/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationPaymentCreateRequest

data PaymentInitiationPaymentCreate 
instance HasBodyParam PaymentInitiationPaymentCreate PaymentInitiationPaymentCreateRequest 

-- | @application/json@
instance Consumes PaymentInitiationPaymentCreate MimeJSON

-- | @application/json@
instance Produces PaymentInitiationPaymentCreate MimeJSON


-- *** paymentInitiationPaymentGet

-- | @POST \/payment_initiation\/payment\/get@
-- 
-- Get payment details
-- 
-- The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
paymentInitiationPaymentGet 
  :: (Consumes PaymentInitiationPaymentGet MimeJSON, MimeRender MimeJSON PaymentInitiationPaymentGetRequest)
  => PaymentInitiationPaymentGetRequest -- ^ "paymentInitiationPaymentGetRequest"
  -> ThePlaidRequest PaymentInitiationPaymentGet MimeJSON PaymentInitiationPaymentGetResponse MimeJSON
paymentInitiationPaymentGet paymentInitiationPaymentGetRequest =
  _mkRequest "POST" ["/payment_initiation/payment/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationPaymentGetRequest

data PaymentInitiationPaymentGet 
instance HasBodyParam PaymentInitiationPaymentGet PaymentInitiationPaymentGetRequest 

-- | @application/json@
instance Consumes PaymentInitiationPaymentGet MimeJSON

-- | @application/json@
instance Produces PaymentInitiationPaymentGet MimeJSON


-- *** paymentInitiationPaymentList

-- | @POST \/payment_initiation\/payment\/list@
-- 
-- List payments
-- 
-- The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
paymentInitiationPaymentList 
  :: (Consumes PaymentInitiationPaymentList MimeJSON, MimeRender MimeJSON PaymentInitiationPaymentListRequest)
  => PaymentInitiationPaymentListRequest -- ^ "paymentInitiationPaymentListRequest"
  -> ThePlaidRequest PaymentInitiationPaymentList MimeJSON PaymentInitiationPaymentListResponse MimeJSON
paymentInitiationPaymentList paymentInitiationPaymentListRequest =
  _mkRequest "POST" ["/payment_initiation/payment/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationPaymentListRequest

data PaymentInitiationPaymentList 
instance HasBodyParam PaymentInitiationPaymentList PaymentInitiationPaymentListRequest 

-- | @application/json@
instance Consumes PaymentInitiationPaymentList MimeJSON

-- | @application/json@
instance Produces PaymentInitiationPaymentList MimeJSON


-- *** paymentInitiationRecipientCreate

-- | @POST \/payment_initiation\/recipient\/create@
-- 
-- Create payment recipient
-- 
-- Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.  In the Sandbox environment, you can use the `/payment_initiation/recipient/create` endpoint to generate recipients. Programmatic recipient creation in the Development and Production environments can be done after approval by Plaid's Compliance team. [Contact Sales](https://plaid.com/contact/)for approval. 
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
paymentInitiationRecipientCreate 
  :: (Consumes PaymentInitiationRecipientCreate MimeJSON, MimeRender MimeJSON PaymentInitiationRecipientCreateRequest)
  => PaymentInitiationRecipientCreateRequest -- ^ "paymentInitiationRecipientCreateRequest"
  -> ThePlaidRequest PaymentInitiationRecipientCreate MimeJSON PaymentInitiationRecipientCreateResponse MimeJSON
paymentInitiationRecipientCreate paymentInitiationRecipientCreateRequest =
  _mkRequest "POST" ["/payment_initiation/recipient/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationRecipientCreateRequest

data PaymentInitiationRecipientCreate 
instance HasBodyParam PaymentInitiationRecipientCreate PaymentInitiationRecipientCreateRequest 

-- | @application/json@
instance Consumes PaymentInitiationRecipientCreate MimeJSON

-- | @application/json@
instance Produces PaymentInitiationRecipientCreate MimeJSON


-- *** paymentInitiationRecipientGet

-- | @POST \/payment_initiation\/recipient\/get@
-- 
-- Get payment recipient
-- 
-- Get details about a payment recipient you have previously created.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
paymentInitiationRecipientGet 
  :: (Consumes PaymentInitiationRecipientGet MimeJSON, MimeRender MimeJSON PaymentInitiationRecipientGetRequest)
  => PaymentInitiationRecipientGetRequest -- ^ "paymentInitiationRecipientGetRequest"
  -> ThePlaidRequest PaymentInitiationRecipientGet MimeJSON PaymentInitiationRecipientGetResponse MimeJSON
paymentInitiationRecipientGet paymentInitiationRecipientGetRequest =
  _mkRequest "POST" ["/payment_initiation/recipient/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationRecipientGetRequest

data PaymentInitiationRecipientGet 
instance HasBodyParam PaymentInitiationRecipientGet PaymentInitiationRecipientGetRequest 

-- | @application/json@
instance Consumes PaymentInitiationRecipientGet MimeJSON

-- | @application/json@
instance Produces PaymentInitiationRecipientGet MimeJSON


-- *** paymentInitiationRecipientList

-- | @POST \/payment_initiation\/recipient\/list@
-- 
-- List payment recipients
-- 
-- The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
paymentInitiationRecipientList 
  :: (Consumes PaymentInitiationRecipientList MimeJSON, MimeRender MimeJSON PaymentInitiationRecipientListRequest)
  => PaymentInitiationRecipientListRequest -- ^ "paymentInitiationRecipientListRequest"
  -> ThePlaidRequest PaymentInitiationRecipientList MimeJSON PaymentInitiationRecipientListResponse MimeJSON
paymentInitiationRecipientList paymentInitiationRecipientListRequest =
  _mkRequest "POST" ["/payment_initiation/recipient/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` paymentInitiationRecipientListRequest

data PaymentInitiationRecipientList 
instance HasBodyParam PaymentInitiationRecipientList PaymentInitiationRecipientListRequest 

-- | @application/json@
instance Consumes PaymentInitiationRecipientList MimeJSON

-- | @application/json@
instance Produces PaymentInitiationRecipientList MimeJSON


-- *** postIncomeVerificationCreate

-- | @POST \/income\/verification\/create@
-- 
-- Create an income verification instance
-- 
-- `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to upload their income documents. Once the documents have been uploaded and parsed, Plaid will fire an `INCOME` webhook.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
postIncomeVerificationCreate 
  :: (Consumes PostIncomeVerificationCreate MimeJSON)
  => ThePlaidRequest PostIncomeVerificationCreate MimeJSON IncomeVerificationCreateResponse MimeJSON
postIncomeVerificationCreate =
  _mkRequest "POST" ["/income/verification/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data PostIncomeVerificationCreate 
instance HasBodyParam PostIncomeVerificationCreate IncomeVerificationCreateRequest 

-- | @application/json@
instance Consumes PostIncomeVerificationCreate MimeJSON

-- | @application/json@
instance Produces PostIncomeVerificationCreate MimeJSON


-- *** processorApexProcessorTokenCreate

-- | @POST \/processor\/apex\/processor_token\/create@
-- 
-- Create Apex bank account token
-- 
-- Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
processorApexProcessorTokenCreate 
  :: (Consumes ProcessorApexProcessorTokenCreate MimeJSON, MimeRender MimeJSON ProcessorApexProcessorTokenCreateRequest)
  => ProcessorApexProcessorTokenCreateRequest -- ^ "processorApexProcessorTokenCreateRequest"
  -> ThePlaidRequest ProcessorApexProcessorTokenCreate MimeJSON ProcessorTokenCreateResponse MimeJSON
processorApexProcessorTokenCreate processorApexProcessorTokenCreateRequest =
  _mkRequest "POST" ["/processor/apex/processor_token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` processorApexProcessorTokenCreateRequest

data ProcessorApexProcessorTokenCreate 
instance HasBodyParam ProcessorApexProcessorTokenCreate ProcessorApexProcessorTokenCreateRequest 

-- | @application/json@
instance Consumes ProcessorApexProcessorTokenCreate MimeJSON

-- | @application/json@
instance Produces ProcessorApexProcessorTokenCreate MimeJSON


-- *** processorAuthGet

-- | @POST \/processor\/auth\/get@
-- 
-- Retrieve Auth data
-- 
-- The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that's associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
processorAuthGet 
  :: (Consumes ProcessorAuthGet MimeJSON, MimeRender MimeJSON ProcessorAuthGetRequest)
  => ProcessorAuthGetRequest -- ^ "processorAuthGetRequest"
  -> ThePlaidRequest ProcessorAuthGet MimeJSON ProcessorAuthGetResponse MimeJSON
processorAuthGet processorAuthGetRequest =
  _mkRequest "POST" ["/processor/auth/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` processorAuthGetRequest

data ProcessorAuthGet 
instance HasBodyParam ProcessorAuthGet ProcessorAuthGetRequest 

-- | @application/json@
instance Consumes ProcessorAuthGet MimeJSON

-- | @application/json@
instance Produces ProcessorAuthGet MimeJSON


-- *** processorBalanceGet

-- | @POST \/processor\/balance\/get@
-- 
-- Retrieve Balance data
-- 
-- The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
processorBalanceGet 
  :: (Consumes ProcessorBalanceGet MimeJSON, MimeRender MimeJSON ProcessorBalanceGetRequest)
  => ProcessorBalanceGetRequest -- ^ "processorBalanceGetRequest" -  The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
  -> ThePlaidRequest ProcessorBalanceGet MimeJSON ProcessorBalanceGetResponse MimeJSON
processorBalanceGet processorBalanceGetRequest =
  _mkRequest "POST" ["/processor/balance/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` processorBalanceGetRequest

data ProcessorBalanceGet 

-- | /Body Param/ "ProcessorBalanceGetRequest" - The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
instance HasBodyParam ProcessorBalanceGet ProcessorBalanceGetRequest 

-- | @application/json@
instance Consumes ProcessorBalanceGet MimeJSON

-- | @application/json@
instance Produces ProcessorBalanceGet MimeJSON


-- *** processorIdentityGet

-- | @POST \/processor\/identity\/get@
-- 
-- Retrieve Identity data
-- 
-- The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
processorIdentityGet 
  :: (Consumes ProcessorIdentityGet MimeJSON, MimeRender MimeJSON ProcessorIdentityGetRequest)
  => ProcessorIdentityGetRequest -- ^ "processorIdentityGetRequest"
  -> ThePlaidRequest ProcessorIdentityGet MimeJSON ProcessorIdentityGetResponse MimeJSON
processorIdentityGet processorIdentityGetRequest =
  _mkRequest "POST" ["/processor/identity/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` processorIdentityGetRequest

data ProcessorIdentityGet 
instance HasBodyParam ProcessorIdentityGet ProcessorIdentityGetRequest 

-- | @application/json@
instance Consumes ProcessorIdentityGet MimeJSON

-- | @application/json@
instance Produces ProcessorIdentityGet MimeJSON


-- *** processorStripeBankAccountTokenCreate

-- | @POST \/processor\/stripe\/bank_account_token\/create@
-- 
-- Create Stripe bank account token
-- 
-- Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
processorStripeBankAccountTokenCreate 
  :: (Consumes ProcessorStripeBankAccountTokenCreate MimeJSON, MimeRender MimeJSON ProcessorStripeBankAccountTokenCreateRequest)
  => ProcessorStripeBankAccountTokenCreateRequest -- ^ "processorStripeBankAccountTokenCreateRequest"
  -> ThePlaidRequest ProcessorStripeBankAccountTokenCreate MimeJSON ProcessorStripeBankAccountTokenCreateResponse MimeJSON
processorStripeBankAccountTokenCreate processorStripeBankAccountTokenCreateRequest =
  _mkRequest "POST" ["/processor/stripe/bank_account_token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` processorStripeBankAccountTokenCreateRequest

data ProcessorStripeBankAccountTokenCreate 
instance HasBodyParam ProcessorStripeBankAccountTokenCreate ProcessorStripeBankAccountTokenCreateRequest 

-- | @application/json@
instance Consumes ProcessorStripeBankAccountTokenCreate MimeJSON

-- | @application/json@
instance Produces ProcessorStripeBankAccountTokenCreate MimeJSON


-- *** processorTokenCreate

-- | @POST \/processor\/token\/create@
-- 
-- Create processor token
-- 
-- Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
processorTokenCreate 
  :: (Consumes ProcessorTokenCreate MimeJSON, MimeRender MimeJSON ProcessorTokenCreateRequest)
  => ProcessorTokenCreateRequest -- ^ "processorTokenCreateRequest"
  -> ThePlaidRequest ProcessorTokenCreate MimeJSON ProcessorTokenCreateResponse MimeJSON
processorTokenCreate processorTokenCreateRequest =
  _mkRequest "POST" ["/processor/token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` processorTokenCreateRequest

data ProcessorTokenCreate 
instance HasBodyParam ProcessorTokenCreate ProcessorTokenCreateRequest 

-- | @application/json@
instance Consumes ProcessorTokenCreate MimeJSON

-- | @application/json@
instance Produces ProcessorTokenCreate MimeJSON


-- *** sandboxBankTransferSimulate

-- | @POST \/sandbox\/bank_transfer\/simulate@
-- 
-- Simulate a bank transfer event in Sandbox
-- 
-- Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
sandboxBankTransferSimulate 
  :: (Consumes SandboxBankTransferSimulate MimeJSON, MimeRender MimeJSON SandboxBankTransferSimulateRequest)
  => SandboxBankTransferSimulateRequest -- ^ "sandboxBankTransferSimulateRequest"
  -> ThePlaidRequest SandboxBankTransferSimulate MimeJSON SandboxBankTransferSimulateResponse MimeJSON
sandboxBankTransferSimulate sandboxBankTransferSimulateRequest =
  _mkRequest "POST" ["/sandbox/bank_transfer/simulate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` sandboxBankTransferSimulateRequest

data SandboxBankTransferSimulate 
instance HasBodyParam SandboxBankTransferSimulate SandboxBankTransferSimulateRequest 

-- | @application/json@
instance Consumes SandboxBankTransferSimulate MimeJSON

-- | @application/json@
instance Produces SandboxBankTransferSimulate MimeJSON


-- *** sandboxItemFireWebhook

-- | @POST \/sandbox\/item\/fire_webhook@
-- 
-- Fire a test webhook
-- 
-- The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. Calling this endpoint triggers a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
sandboxItemFireWebhook 
  :: (Consumes SandboxItemFireWebhook MimeJSON, MimeRender MimeJSON SandboxItemFireWebhookRequest)
  => SandboxItemFireWebhookRequest -- ^ "sandboxItemFireWebhookRequest"
  -> ThePlaidRequest SandboxItemFireWebhook MimeJSON SandboxItemFireWebhookResponse MimeJSON
sandboxItemFireWebhook sandboxItemFireWebhookRequest =
  _mkRequest "POST" ["/sandbox/item/fire_webhook"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` sandboxItemFireWebhookRequest

data SandboxItemFireWebhook 
instance HasBodyParam SandboxItemFireWebhook SandboxItemFireWebhookRequest 

-- | @application/json@
instance Consumes SandboxItemFireWebhook MimeJSON

-- | @application/json@
instance Produces SandboxItemFireWebhook MimeJSON


-- *** sandboxItemResetLogin

-- | @POST \/sandbox\/item\/reset_login@
-- 
-- Force a Sandbox Item into an error state
-- 
-- `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
sandboxItemResetLogin 
  :: (Consumes SandboxItemResetLogin MimeJSON, MimeRender MimeJSON SandboxItemResetLoginRequest)
  => SandboxItemResetLoginRequest -- ^ "sandboxItemResetLoginRequest"
  -> ThePlaidRequest SandboxItemResetLogin MimeJSON SandboxItemResetLoginResponse MimeJSON
sandboxItemResetLogin sandboxItemResetLoginRequest =
  _mkRequest "POST" ["/sandbox/item/reset_login"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` sandboxItemResetLoginRequest

data SandboxItemResetLogin 
instance HasBodyParam SandboxItemResetLogin SandboxItemResetLoginRequest 

-- | @application/json@
instance Consumes SandboxItemResetLogin MimeJSON

-- | @application/json@
instance Produces SandboxItemResetLogin MimeJSON


-- *** sandboxItemSetVerificationStatus

-- | @POST \/sandbox\/item\/set_verification_status@
-- 
-- Set verification status for Sandbox account
-- 
-- The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](/docs/auth/coverage/testing#).
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
sandboxItemSetVerificationStatus 
  :: (Consumes SandboxItemSetVerificationStatus MimeJSON, MimeRender MimeJSON SandboxItemSetVerificationStatusRequest)
  => SandboxItemSetVerificationStatusRequest -- ^ "sandboxItemSetVerificationStatusRequest"
  -> ThePlaidRequest SandboxItemSetVerificationStatus MimeJSON SandboxItemSetVerificationStatusResponse MimeJSON
sandboxItemSetVerificationStatus sandboxItemSetVerificationStatusRequest =
  _mkRequest "POST" ["/sandbox/item/set_verification_status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` sandboxItemSetVerificationStatusRequest

data SandboxItemSetVerificationStatus 
instance HasBodyParam SandboxItemSetVerificationStatus SandboxItemSetVerificationStatusRequest 

-- | @application/json@
instance Consumes SandboxItemSetVerificationStatus MimeJSON

-- | @application/json@
instance Produces SandboxItemSetVerificationStatus MimeJSON


-- *** sandboxProcessorTokenCreate

-- | @POST \/sandbox\/processor_token\/create@
-- 
-- Create a test Item and processor token
-- 
-- Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](/docs/sandbox/user-custom) to generate a test account with custom data.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
sandboxProcessorTokenCreate 
  :: (Consumes SandboxProcessorTokenCreate MimeJSON)
  => ThePlaidRequest SandboxProcessorTokenCreate MimeJSON SandboxProcessorTokenCreateResponse MimeJSON
sandboxProcessorTokenCreate =
  _mkRequest "POST" ["/sandbox/processor_token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)

data SandboxProcessorTokenCreate 
instance HasBodyParam SandboxProcessorTokenCreate SandboxProcessorTokenCreateRequest 

-- | @application/json@
instance Consumes SandboxProcessorTokenCreate MimeJSON

-- | @application/json@
instance Produces SandboxProcessorTokenCreate MimeJSON


-- *** sandboxPublicTokenCreate

-- | @POST \/sandbox\/public_token\/create@
-- 
-- Create a test Item
-- 
-- Use the `/sandbox/public_token/create`  endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](/docs/sandbox/user-custom) to generate a test account with custom data.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
sandboxPublicTokenCreate 
  :: (Consumes SandboxPublicTokenCreate MimeJSON, MimeRender MimeJSON SandboxPublicTokenCreateRequest)
  => SandboxPublicTokenCreateRequest -- ^ "sandboxPublicTokenCreateRequest"
  -> ThePlaidRequest SandboxPublicTokenCreate MimeJSON SandboxPublicTokenCreateResponse MimeJSON
sandboxPublicTokenCreate sandboxPublicTokenCreateRequest =
  _mkRequest "POST" ["/sandbox/public_token/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` sandboxPublicTokenCreateRequest

data SandboxPublicTokenCreate 
instance HasBodyParam SandboxPublicTokenCreate SandboxPublicTokenCreateRequest 

-- | @application/json@
instance Consumes SandboxPublicTokenCreate MimeJSON

-- | @application/json@
instance Produces SandboxPublicTokenCreate MimeJSON


-- *** transactionsGet

-- | @POST \/transactions\/get@
-- 
-- Get transaction data
-- 
-- The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (the list of loan-type accounts supported is the same as for Liabilities; for details, see the `/liabilities/get` endpoint). For transaction history from investments accounts, use the [Investments endpoint](/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
transactionsGet 
  :: (Consumes TransactionsGet MimeJSON, MimeRender MimeJSON TransactionsGetRequest)
  => TransactionsGetRequest -- ^ "transactionsGetRequest"
  -> ThePlaidRequest TransactionsGet MimeJSON TransactionsGetResponse MimeJSON
transactionsGet transactionsGetRequest =
  _mkRequest "POST" ["/transactions/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` transactionsGetRequest

data TransactionsGet 
instance HasBodyParam TransactionsGet TransactionsGetRequest 

-- | @application/json@
instance Consumes TransactionsGet MimeJSON

-- | @application/json@
instance Produces TransactionsGet MimeJSON


-- *** transactionsRefresh

-- | @POST \/transactions\/refresh@
-- 
-- Refresh transaction data
-- 
-- `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
transactionsRefresh 
  :: (Consumes TransactionsRefresh MimeJSON, MimeRender MimeJSON TransactionsRefreshRequest)
  => TransactionsRefreshRequest -- ^ "transactionsRefreshRequest"
  -> ThePlaidRequest TransactionsRefresh MimeJSON TransactionsRefreshResponse MimeJSON
transactionsRefresh transactionsRefreshRequest =
  _mkRequest "POST" ["/transactions/refresh"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` transactionsRefreshRequest

data TransactionsRefresh 
instance HasBodyParam TransactionsRefresh TransactionsRefreshRequest 

-- | @application/json@
instance Consumes TransactionsRefresh MimeJSON

-- | @application/json@
instance Produces TransactionsRefresh MimeJSON


-- *** transactionsSync

-- | @POST \/transactions\/sync@
-- 
-- Get incremental transaction updates on an Item
-- 
-- This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.  The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
transactionsSync 
  :: (Consumes TransactionsSync MimeJSON, MimeRender MimeJSON TransactionsSyncRequest)
  => TransactionsSyncRequest -- ^ "transactionsSyncRequest"
  -> ThePlaidRequest TransactionsSync MimeJSON TransactionsSyncResponse MimeJSON
transactionsSync transactionsSyncRequest =
  _mkRequest "POST" ["/transactions/sync"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` transactionsSyncRequest

data TransactionsSync 
instance HasBodyParam TransactionsSync TransactionsSyncRequest 

-- | @application/json@
instance Consumes TransactionsSync MimeJSON

-- | @application/json@
instance Produces TransactionsSync MimeJSON


-- *** webhookVerificationKeyGet

-- | @POST \/webhook_verification_key\/get@
-- 
-- Get webhook verification key
-- 
-- Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
-- 
-- AuthMethod: 'AuthApiKeyClientId', 'AuthApiKeyPlaidVersion', 'AuthApiKeySecret'
-- 
webhookVerificationKeyGet 
  :: (Consumes WebhookVerificationKeyGet MimeJSON, MimeRender MimeJSON WebhookVerificationKeyGetRequest)
  => WebhookVerificationKeyGetRequest -- ^ "webhookVerificationKeyGetRequest"
  -> ThePlaidRequest WebhookVerificationKeyGet MimeJSON WebhookVerificationKeyGetResponse MimeJSON
webhookVerificationKeyGet webhookVerificationKeyGetRequest =
  _mkRequest "POST" ["/webhook_verification_key/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyClientId)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyPlaidVersion)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecret)
    `setBodyParam` webhookVerificationKeyGetRequest

data WebhookVerificationKeyGet 
instance HasBodyParam WebhookVerificationKeyGet WebhookVerificationKeyGetRequest 

-- | @application/json@
instance Consumes WebhookVerificationKeyGet MimeJSON

-- | @application/json@
instance Produces WebhookVerificationKeyGet MimeJSON

